var $JSCompiler_alias_TRUE$$=!0,$global$$=$global$$||window;"undefined"==typeof window&&(window=window||$global$$);function $UTIL$Class$TypeClass$$(){}$UTIL$Class$TypeClass$$.prototype={get:function $$UTIL$Class$TypeClass$$$$get$($obj$$19$$){var $type$$52$$=typeof $obj$$19$$;if("number"==$type$$52$$){if($obj$$19$$===+$obj$$19$$&&$obj$$19$$!==($obj$$19$$|0))return"float";if($obj$$19$$===+$obj$$19$$&&$obj$$19$$===($obj$$19$$|0))return"integer"}return $type$$52$$}};var $UTIL$type$$=new $UTIL$Class$TypeClass$$;var $ALGO$$=$ALGO$$||{};$ALGO$$.$Class$={};$ALGO$$.$Class$.$__profileEXCLUDE$=$JSCompiler_alias_TRUE$$;$ALGO$$.$comp$=$ALGO$$.$comp$||{};$ALGO$$.$comp$.$__profileEXCLUDE$=$JSCompiler_alias_TRUE$$;$ALGO$$.$comp$.$ASC$=function $$ALGO$$$$comp$$$ASC$$($x$$53$$,$y$$36$$){return $x$$53$$>$y$$36$$?$JSCompiler_alias_TRUE$$:!1};$ALGO$$.$comp$.$DESC$=function $$ALGO$$$$comp$$$DESC$$($x$$54$$,$y$$37$$){return $x$$54$$<$y$$37$$?$JSCompiler_alias_TRUE$$:!1};$ALGO$$.test=$ALGO$$.test||{};var $DATA$$inline_0$$=$DATA$$inline_0$$||{};$DATA$$inline_0$$.$Class$={};$DATA$$inline_0$$.$Class$.$__profileEXCLUDE$=$JSCompiler_alias_TRUE$$;$DATA$$inline_0$$.test=$DATA$$inline_0$$.test||{};$global$$.$DATA$=$DATA$$inline_0$$;function $MATH$digitRound$$($x$$55$$){var $mult$$=Math.pow(10,3);return Math.round($x$$55$$*$mult$$)/$mult$$};function $ALGO$Class$SortMerge$$(){this.$__profileEXCLUDE$=$JSCompiler_alias_TRUE$$;this.$compFunc$=$ALGO$$.$comp$.$ASC$}
$ALGO$Class$SortMerge$$.prototype={sort:function $$ALGO$Class$SortMerge$$$$sort$($array$$9$$,$compFunc$$){this.$compFunc$=$compFunc$$;$JSCompiler_StaticMethods__mergesort$$(this,$array$$9$$,0,$array$$9$$.length);return $array$$9$$},$_insert$:function $$ALGO$Class$SortMerge$$$$$_insert$$($array$$12$$,$begin$$13$$,$end$$4$$,$v$$1$$){for(var $tmp$$;$begin$$13$$+1<$end$$4$$&&this.$compFunc$($array$$12$$[$begin$$13$$+1],$v$$1$$);)$tmp$$=$array$$12$$[$begin$$13$$],$array$$12$$[$begin$$13$$]=$array$$12$$[$begin$$13$$+
1],$array$$12$$[$begin$$13$$+1]=$tmp$$,++$begin$$13$$;$array$$12$$[$begin$$13$$]=$v$$1$$}};
function $JSCompiler_StaticMethods__mergesort$$($JSCompiler_StaticMethods__mergesort$self$$,$array$$10$$,$begin$$11_begin$$inline_4$$,$end$$2$$){var $begin_right_size$$10$$=$end$$2$$-$begin$$11_begin$$inline_4$$;if(!(2>$begin_right_size$$10$$)){$begin_right_size$$10$$=$begin$$11_begin$$inline_4$$+($begin_right_size$$10$$>>1);$JSCompiler_StaticMethods__mergesort$$($JSCompiler_StaticMethods__mergesort$self$$,$array$$10$$,$begin$$11_begin$$inline_4$$,$begin_right_size$$10$$);$JSCompiler_StaticMethods__mergesort$$($JSCompiler_StaticMethods__mergesort$self$$,
$array$$10$$,$begin_right_size$$10$$,$end$$2$$);for(var $v$$inline_7$$;$begin$$11_begin$$inline_4$$<$begin_right_size$$10$$;++$begin$$11_begin$$inline_4$$)$JSCompiler_StaticMethods__mergesort$self$$.$compFunc$($array$$10$$[$begin$$11_begin$$inline_4$$],$array$$10$$[$begin_right_size$$10$$])&&($v$$inline_7$$=$array$$10$$[$begin$$11_begin$$inline_4$$],$array$$10$$[$begin$$11_begin$$inline_4$$]=$array$$10$$[$begin_right_size$$10$$],$JSCompiler_StaticMethods__mergesort$self$$.$_insert$($array$$10$$,$begin_right_size$$10$$,
$end$$2$$,$v$$inline_7$$))}};function $ALGO$Class$SortQuick$$(){this.$__profileEXCLUDE$=$JSCompiler_alias_TRUE$$;this.$compFunc$=$ALGO$$.$comp$.$ASC$}$ALGO$Class$SortQuick$$.prototype={sort:function $$ALGO$Class$SortQuick$$$$sort$($array$$13$$,$compFunc$$1$$){this.$compFunc$=$compFunc$$1$$;return $JSCompiler_StaticMethods__quicksort$$(this,$array$$13$$,0,$array$$13$$.length-1)}};
function $JSCompiler_StaticMethods__quicksort$$($JSCompiler_StaticMethods__quicksort$self$$,$array$$15$$,$left$$4$$,$right$$4$$){if($left$$4$$<$right$$4$$){var $pivotNewIndex_tmp$$inline_14$$,$pivotIndex$$inline_13_storeIndex$$inline_15$$=$left$$4$$+$right$$4$$>>1,$pivotValue$$inline_16$$=$array$$15$$[$pivotIndex$$inline_13_storeIndex$$inline_15$$];$pivotNewIndex_tmp$$inline_14$$=$array$$15$$[$pivotIndex$$inline_13_storeIndex$$inline_15$$];$array$$15$$[$pivotIndex$$inline_13_storeIndex$$inline_15$$]=
$array$$15$$[$right$$4$$];$array$$15$$[$right$$4$$]=$pivotNewIndex_tmp$$inline_14$$;for(i=$pivotIndex$$inline_13_storeIndex$$inline_15$$=$left$$4$$;i<$right$$4$$;++i)$JSCompiler_StaticMethods__quicksort$self$$.$compFunc$($pivotValue$$inline_16$$,$array$$15$$[i])&&($pivotNewIndex_tmp$$inline_14$$=$array$$15$$[i],$array$$15$$[i]=$array$$15$$[$pivotIndex$$inline_13_storeIndex$$inline_15$$],$array$$15$$[$pivotIndex$$inline_13_storeIndex$$inline_15$$]=$pivotNewIndex_tmp$$inline_14$$,$pivotIndex$$inline_13_storeIndex$$inline_15$$+=
1);$pivotNewIndex_tmp$$inline_14$$=$array$$15$$[$pivotIndex$$inline_13_storeIndex$$inline_15$$];$array$$15$$[$pivotIndex$$inline_13_storeIndex$$inline_15$$]=$array$$15$$[$right$$4$$];$array$$15$$[$right$$4$$]=$pivotNewIndex_tmp$$inline_14$$;$pivotNewIndex_tmp$$inline_14$$=$pivotIndex$$inline_13_storeIndex$$inline_15$$;$JSCompiler_StaticMethods__quicksort$$($JSCompiler_StaticMethods__quicksort$self$$,$array$$15$$,$left$$4$$,$pivotNewIndex_tmp$$inline_14$$-1);$JSCompiler_StaticMethods__quicksort$$($JSCompiler_StaticMethods__quicksort$self$$,
$array$$15$$,$pivotNewIndex_tmp$$inline_14$$+1,$right$$4$$)}return $array$$15$$};function $ALGO$Class$SortBubble$$(){this.$__profileEXCLUDE$=$JSCompiler_alias_TRUE$$}
$ALGO$Class$SortBubble$$.prototype={sort:function $$ALGO$Class$SortBubble$$$$sort$($array$$16$$,$compFunc$$2$$){for(var $n$$1$$=$array$$16$$.length,$i$$3$$,$newn_tmp$$2$$;0<$n$$1$$;){$newn_tmp$$2$$=0;for($i$$3$$=1;$i$$3$$<$n$$1$$;++$i$$3$$)$compFunc$$2$$($array$$16$$[$i$$3$$-1],$array$$16$$[$i$$3$$])&&($newn_tmp$$2$$=$array$$16$$[$i$$3$$-1],$array$$16$$[$i$$3$$-1]=$array$$16$$[$i$$3$$],$array$$16$$[$i$$3$$]=$newn_tmp$$2$$,$newn_tmp$$2$$=$i$$3$$);$n$$1$$=$newn_tmp$$2$$}return $array$$16$$}};function $ALGO$Class$SortHeap$$(){this.$__profileEXCLUDE$=$JSCompiler_alias_TRUE$$;this.$compFunc$=$ALGO$$.$comp$.$ASC$}
$ALGO$Class$SortHeap$$.prototype={sort:function $$ALGO$Class$SortHeap$$$$sort$($array$$17$$,$compFunc$$3$$){this.$compFunc$=$compFunc$$3$$;var $count$$inline_22_tmp$$inline_20$$,$end$$inline_21_start$$inline_40$$;$count$$inline_22_tmp$$inline_20$$=$array$$17$$.length;var $count$$inline_42_end$$inline_41$$;$count$$inline_42_end$$inline_41$$=$array$$17$$.length;$end$$inline_21_start$$inline_40$$=$count$$inline_42_end$$inline_41$$-2>>1;for($count$$inline_42_end$$inline_41$$-=1;0<=$end$$inline_21_start$$inline_40$$;)$JSCompiler_StaticMethods__siftDown$$(this,
$array$$17$$,$end$$inline_21_start$$inline_40$$,$count$$inline_42_end$$inline_41$$),--$end$$inline_21_start$$inline_40$$;for($end$$inline_21_start$$inline_40$$=$count$$inline_22_tmp$$inline_20$$-1;0<$end$$inline_21_start$$inline_40$$;)$count$$inline_22_tmp$$inline_20$$=$array$$17$$[$end$$inline_21_start$$inline_40$$],$array$$17$$[$end$$inline_21_start$$inline_40$$]=$array$$17$$[0],$array$$17$$[0]=$count$$inline_22_tmp$$inline_20$$,$end$$inline_21_start$$inline_40$$-=1,$JSCompiler_StaticMethods__siftDown$$(this,
$array$$17$$,0,$end$$inline_21_start$$inline_40$$);return $array$$17$$}};
function $JSCompiler_StaticMethods__siftDown$$($JSCompiler_StaticMethods__siftDown$self$$,$array$$21$$,$start$$6_swap$$,$end$$8$$){for(var $child$$1_tmp$$5$$,$root$$=$start$$6_swap$$;($root$$<<1)+1<=$end$$8$$;)if($child$$1_tmp$$5$$=($root$$<<1)+1,$start$$6_swap$$=$root$$,$JSCompiler_StaticMethods__siftDown$self$$.$compFunc$($array$$21$$[$child$$1_tmp$$5$$],$array$$21$$[$start$$6_swap$$])&&($start$$6_swap$$=$child$$1_tmp$$5$$),$child$$1_tmp$$5$$+1<=$end$$8$$&&$JSCompiler_StaticMethods__siftDown$self$$.$compFunc$($array$$21$$[$child$$1_tmp$$5$$+
1],$array$$21$$[$start$$6_swap$$])&&($start$$6_swap$$=$child$$1_tmp$$5$$+1),$start$$6_swap$$!=$root$$)$child$$1_tmp$$5$$=$array$$21$$[$root$$],$array$$21$$[$root$$]=$array$$21$$[$start$$6_swap$$],$array$$21$$[$start$$6_swap$$]=$child$$1_tmp$$5$$,$root$$=$start$$6_swap$$;else break};$ALGO$$.sort=function $$ALGO$$$sort$($data$$inline_24$$,$compFunc$$inline_25$$,$type$$inline_26$$){return $ALGO$$.$Class$.$SortInst$.sort($data$$inline_24$$,$compFunc$$inline_25$$,$type$$inline_26$$)};
$ALGO$$.$Class$.$SortClass$=function $$ALGO$$$$Class$$$SortClass$$(){this.$__profileEXCLUDE$=$JSCompiler_alias_TRUE$$;this.$algos$={};this.$addSortAlgo$("bubble",new $ALGO$Class$SortBubble$$);this.$addSortAlgo$("quick",new $ALGO$Class$SortQuick$$);this.$addSortAlgo$("merge",new $ALGO$Class$SortMerge$$);this.$addSortAlgo$("heap",new $ALGO$Class$SortHeap$$)};
$ALGO$$.$Class$.$SortClass$.prototype={sort:function $$ALGO$$$$Class$$$SortClass$$$sort$($data$$inline_27$$,$compFunc$$inline_28$$,$type$$inline_29$$){$compFunc$$inline_28$$||($compFunc$$inline_28$$=$ALGO$$.$comp$.$ASC$);$type$$inline_29$$||($type$$inline_29$$="bubble");return this.$algos$[$type$$inline_29$$]?this.$algos$[$type$$inline_29$$].sort($data$$inline_27$$,$compFunc$$inline_28$$):$data$$inline_27$$},$addSortAlgo$:function $$ALGO$$$$Class$$$SortClass$$$$addSortAlgo$$($name$$inline_30$$,$func$$inline_31$$){this.$algos$[$name$$inline_30$$]=
$func$$inline_31$$}};$ALGO$$.$Class$.$SortInst$=new $ALGO$$.$Class$.$SortClass$;var $TEST$$=$TEST$$||{};$TEST$$.all=function $$TEST$$$all$(){$TEST$$.$general$.all();$TEST$$.data.all();$TEST$$.$algo$.all()};function $TEST$Profile$$(){this.$_endFrameTime$=this.$_startFrameTime$=0}$TEST$Profile$$.prototype={start:function $$TEST$Profile$$$$start$(){this.$_startFrameTime$=window.performance.now()},stop:function $$TEST$Profile$$$$stop$(){this.$_endFrameTime$=window.performance.now()},test:function $$TEST$Profile$$$$test$($func$$4$$,$num$$4$$,$args$$){this.start();for(var $i$$4$$=0;$i$$4$$<$num$$4$$;++$i$$4$$)$func$$4$$.apply(this,$args$$);this.stop();return this.$_endFrameTime$-this.$_startFrameTime$}};
function $TEST$StatsProfile$$(){this.profile=new $TEST$Profile$$}
$TEST$StatsProfile$$.prototype={test:function $$TEST$StatsProfile$$$$test$($loops_rampLow$$,$inc_rampHigh$$,$steps$$,$samples$$,$func$$5$$,$args$$1$$){$inc_rampHigh$$=Math.floor(($inc_rampHigh$$-$loops_rampLow$$)/($steps$$-1));for(var $count$$9$$=0,$diffList_stddev$$,$i$$5$$,$sum$$,$diffFrameTime_mean$$;$count$$9$$<$steps$$;){$sum$$=0;$diffList_stddev$$=[];for($i$$5$$=0;$i$$5$$<$samples$$;++$i$$5$$)$diffFrameTime_mean$$=this.profile.test($func$$5$$,$loops_rampLow$$,$args$$1$$),$sum$$+=$diffFrameTime_mean$$,
$diffList_stddev$$.push($diffFrameTime_mean$$);$diffFrameTime_mean$$=$sum$$/$samples$$;++$count$$9$$;for($i$$5$$=$sum$$=0;$i$$5$$<$diffList_stddev$$.length;++$i$$5$$)$sum$$+=($diffList_stddev$$[$i$$5$$]-$diffFrameTime_mean$$)*($diffList_stddev$$[$i$$5$$]-$diffFrameTime_mean$$);$diffList_stddev$$=$sum$$/($samples$$-1);console.log("--- Run:",$count$$9$$,", Samples:",$samples$$,", Loops:",$loops_rampLow$$,", Mean:",$MATH$digitRound$$($diffFrameTime_mean$$),", StdDev:",$MATH$digitRound$$($diffList_stddev$$));
$loops_rampLow$$+=$inc_rampHigh$$}}};
function $JSCompiler_StaticMethods_compareArray$$($JSCompiler_StaticMethods_compareArray$self$$,$dataSize_rampLow$$1$$,$inc$$1_rampHigh$$1$$,$initFunc$$,$compareFuncArray$$){$inc$$1_rampHigh$$1$$=Math.floor(($inc$$1_rampHigh$$1$$-$dataSize_rampLow$$1$$)/4);for(var $count$$10$$=0,$diffList$$1_stddev$$1$$,$i$$6$$,$data$$23_j$$,$sum$$1$$,$diffFrameTime$$1_mean$$1$$,$args$$2$$;5>$count$$10$$;){$data$$23_j$$=$initFunc$$($dataSize_rampLow$$1$$);$args$$2$$=[$data$$23_j$$];for($data$$23_j$$=0;$data$$23_j$$<
$compareFuncArray$$.length;++$data$$23_j$$){$sum$$1$$=0;$diffList$$1_stddev$$1$$=[];for($i$$6$$=0;10>$i$$6$$;++$i$$6$$)$diffFrameTime$$1_mean$$1$$=$JSCompiler_StaticMethods_compareArray$self$$.profile.test($compareFuncArray$$[$data$$23_j$$],1,$args$$2$$),$sum$$1$$+=$diffFrameTime$$1_mean$$1$$,$diffList$$1_stddev$$1$$.push($diffFrameTime$$1_mean$$1$$);$diffFrameTime$$1_mean$$1$$=$sum$$1$$/10;for($i$$6$$=$sum$$1$$=0;$i$$6$$<$diffList$$1_stddev$$1$$.length;++$i$$6$$)$sum$$1$$+=($diffList$$1_stddev$$1$$[$i$$6$$]-
$diffFrameTime$$1_mean$$1$$)*($diffList$$1_stddev$$1$$[$i$$6$$]-$diffFrameTime$$1_mean$$1$$);$diffList$$1_stddev$$1$$=$sum$$1$$/9;console.log("--- Run:",$count$$10$$+1,", Name:",$compareFuncArray$$[$data$$23_j$$].name,", Samples:",10,", DataSize:",$dataSize_rampLow$$1$$,", Mean:",$MATH$digitRound$$($diffFrameTime$$1_mean$$1$$),", StdDev:",$MATH$digitRound$$($diffList$$1_stddev$$1$$))}$dataSize_rampLow$$1$$+=$inc$$1_rampHigh$$1$$;++$count$$10$$}};$TEST$$=$TEST$$||{};$TEST$$.$general$=$TEST$$.$general$||{};$TEST$$.$general$.all=function $$TEST$$$$general$$all$(){$TEST$$.$general$.$PrivateVsPublic$();$TEST$$.$general$.$IfCase$();$TEST$$.$general$.$MultTwo$();$TEST$$.$general$.$DivTwo$();$TEST$$.$general$.$PowTwo$()};
$TEST$$.$general$.$PrivateVsPublic$=function $$TEST$$$$general$$$PrivateVsPublic$$(){var $stat$$=new $TEST$StatsProfile$$;console.log("-----------------------------------");$JSCompiler_StaticMethods_compareArray$$($stat$$,1E4,1E5,function($dataSize$$1$$){for(var $data$$24$$=[],$i$$7$$=0;$i$$7$$<$dataSize$$1$$;++$i$$7$$)$data$$24$$.push(Math.random());return $data$$24$$},[function PrivateFunc($data$$25$$){for(var $sum$$2$$=0,$i$$8$$=0;$i$$8$$<$data$$25$$.length;++$i$$8$$)$sum$$2$$+=Math.cos($data$$25$$[$i$$8$$]);
return $sum$$2$$},function PrivilegedFunc($data$$28$$){for(var $sum$$3$$=0,$ptest$$=new function(){this.$calc$=function $this$$calc$$($data$$30$$){return Math.cos($data$$30$$)}},$i$$9$$=0;$i$$9$$<$data$$28$$.length;++$i$$9$$)$sum$$3$$+=$ptest$$.$calc$($data$$28$$[$i$$9$$]);return $sum$$3$$},function PublicFunc($data$$31$$){function $PublicFuncTest$$(){}$PublicFuncTest$$.prototype.$calc$=function $$PublicFuncTest$$$$$calc$$($data$$32$$){return Math.cos($data$$32$$)};for(var $sum$$4$$=0,$ptest$$1$$=
new $PublicFuncTest$$,$i$$10$$=0;$i$$10$$<$data$$31$$.length;++$i$$10$$)$sum$$4$$+=$ptest$$1$$.$calc$($data$$31$$[$i$$10$$]);return $sum$$4$$}])};$TEST$$.$general$.$IfCase$=function $$TEST$$$$general$$$IfCase$$(){var $stat$$1$$;$stat$$1$$=new $TEST$StatsProfile$$;console.log("-----------------------------------");console.log("-- Case Switch");$stat$$1$$.test(1E4,1E5,5,10,function(){});console.log("-----------------------------------");console.log("-- If Switch");$stat$$1$$.test(1E4,1E5,5,10,function(){})};
$TEST$$.$general$.$PowTwo$=function $$TEST$$$$general$$$PowTwo$$(){var $stat$$2$$;$stat$$2$$=new $TEST$StatsProfile$$;console.log("-----------------------------------");console.log("-- Math.pow(x, 2)");$stat$$2$$.test(1E3,1E5,5,10,function(){return Math.pow(Math.random(),2)});console.log("-----------------------------------");console.log("-- x * x");$stat$$2$$.test(1E3,1E5,5,10,function(){var $tmp$$8$$=Math.random();return $tmp$$8$$*$tmp$$8$$})};
$TEST$$.$general$.$MultTwo$=function $$TEST$$$$general$$$MultTwo$$(){var $stat$$3$$;$stat$$3$$=new $TEST$StatsProfile$$;console.log("-----------------------------------");console.log("-- x * 2");$stat$$3$$.test(1E3,1E5,5,10,function(){return 2*Math.random()});console.log("-----------------------------------");console.log("-- x << 1");$stat$$3$$.test(1E3,1E5,5,10,function(){return Math.random()<<1})};
$TEST$$.$general$.$DivTwo$=function $$TEST$$$$general$$$DivTwo$$(){var $stat$$4$$;$stat$$4$$=new $TEST$StatsProfile$$;console.log("-----------------------------------");console.log("-- x / 2");$stat$$4$$.test(1E3,1E5,5,10,function(){return Math.random()/2});console.log("-----------------------------------");console.log("-- x * 0.5");$stat$$4$$.test(1E3,1E5,5,10,function(){return 0.5*Math.random()});console.log("-----------------------------------");console.log("-- x >> 1");$stat$$4$$.test(1E3,1E5,
5,10,function(){return Math.random()>>1})};$TEST$$.$algo$=$TEST$$.$algo$||{};$TEST$$.$algo$.all=function $$TEST$$$$algo$$all$(){var $stats$$=new $STATS$Performance$$;$ALGO$$=$stats$$.add($ALGO$$,"ALGO");$TEST$$.$algo$=$stats$$.add($TEST$$.$algo$,"TEST.algo");$TEST$$.$algo$.sort()};$TEST$$.$algo$.sort=function $$TEST$$$$algo$$sort$(){this.$compArray$=function $this$$compArray$$($a$$1$$,$b$$1$$){if($a$$1$$.length!=$b$$1$$.length)return!1;for(var $i$$14$$=0;$i$$14$$<$a$$1$$.length;++$i$$14$$)if($a$$1$$[$i$$14$$]!=$b$$1$$[$i$$14$$])return!1;return $JSCompiler_alias_TRUE$$};this.test=function $this$test$($data$$34$$,$cmpFunc$$){var $sortdata$$,$startFrameTime_testdata$$;console.log("-----------------------");console.log("Native Sort");$startFrameTime_testdata$$=window.performance.now();
$sortdata$$=$cmpFunc$$==$ALGO$$.$comp$.$ASC$?$data$$34$$.sort(function($a$$2$$,$b$$2$$){return $a$$2$$-$b$$2$$}):$data$$34$$.sort(function($a$$3$$,$b$$3$$){return $b$$3$$-$a$$3$$});console.log("-- diffFrameTime",window.performance.now()-$startFrameTime_testdata$$);console.log("-----------------------");console.log("-----------------------");console.log("Bubble Sort");$startFrameTime_testdata$$=$ALGO$$.sort($data$$34$$.slice(),$cmpFunc$$,"bubble");this.$compArray$($sortdata$$,$startFrameTime_testdata$$)?
console.log("Bubble Sort: PASS"):console.error("Bubble Sort: FAIL");console.log("-----------------------");console.log("-----------------------");console.log("Merge Sort");$startFrameTime_testdata$$=$ALGO$$.sort($data$$34$$.slice(),$cmpFunc$$,"merge");this.$compArray$($sortdata$$,$startFrameTime_testdata$$)?console.log("Merge Sort: PASS"):console.error("Merge Sort: FAIL");console.log("-----------------------");console.log("-----------------------");console.log("Heap Sort");$startFrameTime_testdata$$=
$ALGO$$.sort($data$$34$$.slice(),$cmpFunc$$,"heap");this.$compArray$($sortdata$$,$startFrameTime_testdata$$)?console.log("Heap Sort: PASS"):(console.error("Heap Sort: FAIL"),console.log("Correct Sort:",$sortdata$$),console.log("Heap Sort:",$startFrameTime_testdata$$));console.log("-----------------------");console.log("-----------------------");console.log("Quick Sort");$startFrameTime_testdata$$=$ALGO$$.sort($data$$34$$.slice(),$cmpFunc$$,"quick");this.$compArray$($sortdata$$,$startFrameTime_testdata$$)?
console.log("Quick Sort: PASS"):console.error("Quick Sort: FAIL");console.log("-----------------------");console.log("-----------------------");console.log("Default Sort");$startFrameTime_testdata$$=$ALGO$$.sort($data$$34$$.slice(),$cmpFunc$$);this.$compArray$($sortdata$$,$startFrameTime_testdata$$)?console.log("Default Sort: PASS"):console.error("Default Sort: FAIL");console.log("-----------------------")};for(var $data$$33$$=[],$i$$13$$=0;5E4>$i$$13$$;++$i$$13$$)$data$$33$$.push(Math.random());
console.log("----------------------------------------------");console.log("-- ALGO Sort Test");console.log("--- dataType:",$UTIL$type$$.get($data$$33$$[0]));console.log("--- dataSize:",5E4);this.test($data$$33$$,$ALGO$$.$comp$.$ASC$);this.test($data$$33$$,$ALGO$$.$comp$.$DESC$);console.log("----------------------------------------------")};$TEST$$.data=$TEST$$.data||{};$TEST$$.data.all=function $$TEST$$$data$all$(){var $stats$$1$$;$stats$$1$$=new $STATS$Performance$$;$stats$$1$$.add(void 0,"DATA");$TEST$$.data=$stats$$1$$.add($TEST$$.data,"TEST.data");$TEST$$.data.list()};$TEST$$.data.list=function $$TEST$$$data$list$(){this.test=function $this$test$($dataSize$$4$$,$compFunc$$6$$){var $stat$$5$$=new $TEST$StatsProfile$$;console.log("-----------------------------------");$JSCompiler_StaticMethods_compareArray$$($stat$$5$$,1,3E3,function($dataSize$$5$$){for(var $data$$36$$=[],$i$$15$$=0;$i$$15$$<$dataSize$$5$$;++$i$$15$$)$data$$36$$.push(Math.random());return $data$$36$$},[function Native($data$$37$$){for(var $sortdata$$1$$=[],$i$$16$$=0;$i$$16$$<$data$$37$$.length;++$i$$16$$)$sortdata$$1$$.splice(0,
0,$data$$37$$[$i$$16$$]),$sortdata$$1$$=$ALGO$$.sort($sortdata$$1$$);return $sortdata$$1$$},function PriorityQueue($data$$38$$){for(var $pq$$=new $DATA$Class$PriorityQueue$$($compFunc$$6$$),$i$$17$$=0;$i$$17$$<$data$$38$$.length;++$i$$17$$)$pq$$.add($data$$38$$[$i$$17$$]);return $pq$$.$_list$}])};var $dataSize$$3$$;$dataSize$$3$$=100;$dataSize$$3$$=1E3;console.log("----------------------------------------------");console.log("-- DATA List Test");this.test($dataSize$$3$$,$ALGO$$.$comp$.$ASC$);console.log("----------------------------------------------")};function $DATA$Class$PriorityQueue$$($compFunc$$7$$){this.$_list$=[];this.$compFunc$=$compFunc$$7$$?$compFunc$$7$$:$ALGO$$.$comp$.$ASC$}
$DATA$Class$PriorityQueue$$.prototype={add:function $$DATA$Class$PriorityQueue$$$$add$($data$$39$$){var $size$$11$$=this.$_list$.length;0==$size$$11$$?this.$_list$.push($data$$39$$):1==$size$$11$$?this.$compFunc$($data$$39$$,this.$_list$[0])?this.$_list$.push($data$$39$$):this.$_list$.splice(0,0,$data$$39$$):this.$_insert$(0,$size$$11$$-1,$data$$39$$,$size$$11$$)},$_insert$:function $$DATA$Class$PriorityQueue$$$$$_insert$$($left$$5$$,$right$$5$$,$data$$40$$,$size$$12$$){var $i$$18$$=$left$$5$$+($right$$5$$-
$left$$5$$>>1),$lower$$=this.$compFunc$(this.$_list$[$i$$18$$],$data$$40$$),$higher$$=this.$compFunc$($data$$40$$,this.$_list$[$i$$18$$]);0==$i$$18$$&&$lower$$?this.$_list$.splice(0,0,$data$$40$$):$i$$18$$+1==$size$$12$$&&$higher$$?this.$_list$.push($data$$40$$):$higher$$&&this.$compFunc$(this.$_list$[$i$$18$$+1],$data$$40$$)?this.$_list$.splice($i$$18$$+1,0,$data$$40$$):$lower$$&&this.$compFunc$(this.$_list$[$i$$18$$+1],$data$$40$$)?this.$_insert$($left$$5$$,$i$$18$$,$data$$40$$,$size$$12$$):$higher$$&&
this.$compFunc$($data$$40$$,this.$_list$[$i$$18$$+1])?this.$_insert$($i$$18$$+1,$right$$5$$,$data$$40$$,$size$$12$$):$data$$40$$==this.$_list$[$i$$18$$]?this.$_list$.splice($i$$18$$,0,$data$$40$$):console.error("missed")}};function $STATS$Performance$$(){this.$tree$={parent:null,name:"root",totalDiff:0,totalHeapSize:0}}
function $JSCompiler_StaticMethods_r_add$$($JSCompiler_StaticMethods_r_add$self$$,$newobj$$,$oldobj$$,$tree$$){for(var $key$$14$$ in $oldobj$$)if($oldobj$$.$__profileINCLUDE$&&!$oldobj$$.$__profileINCLUDE$[$key$$14$$])$newobj$$[$key$$14$$]=$oldobj$$[$key$$14$$];else{var $type$$55$$=typeof $oldobj$$[$key$$14$$];"function"==$type$$55$$?($tree$$[$key$$14$$]={parent:$tree$$,name:$key$$14$$,start:0,end:0,diff:0,heapSize:0,callCount:0},$newobj$$[$key$$14$$]=$JSCompiler_StaticMethods_createFunc$$($JSCompiler_StaticMethods_r_add$self$$,
$newobj$$,$oldobj$$,$key$$14$$,$tree$$)):"object"==$type$$55$$?$oldobj$$[$key$$14$$].$__profileEXCLUDE$?$newobj$$[$key$$14$$]=$oldobj$$[$key$$14$$]:($tree$$[$key$$14$$]={parent:$tree$$,name:$key$$14$$,totalDiff:0,totalHeapSize:0},$newobj$$[$key$$14$$]=$JSCompiler_StaticMethods_r_add$$($JSCompiler_StaticMethods_r_add$self$$,{},$oldobj$$[$key$$14$$],$tree$$[$key$$14$$])):$newobj$$[$key$$14$$]=$oldobj$$[$key$$14$$]}return $newobj$$}
$STATS$Performance$$.prototype.add=function $$STATS$Performance$$$$add$($obj$$20$$,$key$$16$$){this.$tree$[$key$$16$$]={parent:this.$tree$,name:$key$$16$$,totalDiff:0,totalHeapSize:0};return $JSCompiler_StaticMethods_r_add$$(this,{},$obj$$20$$,this.$tree$[$key$$16$$])};
function $JSCompiler_StaticMethods_createFunc$$($JSCompiler_StaticMethods_createFunc$self$$,$newobj$$1$$,$oldobj$$1$$,$key$$17$$,$tree$$1$$){for(var $fullClassPathName$$,$out$$inline_35$$=[$key$$17$$],$p$$inline_36$$=$tree$$1$$;null!=$p$$inline_36$$.parent;)$out$$inline_35$$.splice(0,0,$p$$inline_36$$.name),$p$$inline_36$$=$p$$inline_36$$.parent;$fullClassPathName$$=$out$$inline_35$$.join(".");var $stats$$2$$=$tree$$1$$[$key$$17$$];return $JSCompiler_StaticMethods_r_add$$($JSCompiler_StaticMethods_createFunc$self$$,
Object(function(){var $returnVal$$;++$stats$$2$$.$callCount$;$stats$$2$$.start=window.performance.now();$stats$$2$$.$heapSize$=window.performance.memory.usedJSHeapSize;$returnVal$$=$oldobj$$1$$[$key$$17$$].apply($newobj$$1$$,arguments);$stats$$2$$.end=window.performance.now();$stats$$2$$.$diff$=$stats$$2$$.end-$stats$$2$$.start;console.log("--",'"'+$fullClassPathName$$+'"',arguments,"Function Performance -- diff",$stats$$2$$.$diff$);$JSCompiler_StaticMethods_applyTotalsToParent$$($JSCompiler_StaticMethods_createFunc$self$$,
$stats$$2$$.parent,$stats$$2$$.$diff$,$stats$$2$$.$heapSize$);return $returnVal$$}),$oldobj$$1$$[$key$$17$$],$stats$$2$$)}
function $JSCompiler_StaticMethods_applyTotalsToParent$$($JSCompiler_StaticMethods_applyTotalsToParent$self$$,$parent$$3$$,$diff$$,$heapSize$$1$$){$parent$$3$$.$totalDiff$+=$diff$$;$parent$$3$$.$totalHeapSize$+=$heapSize$$1$$;null!=$parent$$3$$.parent&&$JSCompiler_StaticMethods_applyTotalsToParent$$($JSCompiler_StaticMethods_applyTotalsToParent$self$$,$parent$$3$$.parent,$diff$$,$heapSize$$1$$)};$TEST$$.all();
